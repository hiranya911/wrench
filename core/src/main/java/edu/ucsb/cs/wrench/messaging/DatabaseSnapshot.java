/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsb.cs.wrench.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DatabaseSnapshot implements org.apache.thrift.TBase<DatabaseSnapshot, DatabaseSnapshot._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DatabaseSnapshot");

  private static final org.apache.thrift.protocol.TField GRADES_FIELD_DESC = new org.apache.thrift.protocol.TField("grades", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DatabaseSnapshotStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DatabaseSnapshotTupleSchemeFactory());
  }

  public List<String> grades; // required
  public List<String> stats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GRADES((short)1, "grades"),
    STATS((short)2, "stats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GRADES
          return GRADES;
        case 2: // STATS
          return STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GRADES, new org.apache.thrift.meta_data.FieldMetaData("grades", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DatabaseSnapshot.class, metaDataMap);
  }

  public DatabaseSnapshot() {
  }

  public DatabaseSnapshot(
    List<String> grades,
    List<String> stats)
  {
    this();
    this.grades = grades;
    this.stats = stats;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DatabaseSnapshot(DatabaseSnapshot other) {
    if (other.isSetGrades()) {
      List<String> __this__grades = new ArrayList<String>();
      for (String other_element : other.grades) {
        __this__grades.add(other_element);
      }
      this.grades = __this__grades;
    }
    if (other.isSetStats()) {
      List<String> __this__stats = new ArrayList<String>();
      for (String other_element : other.stats) {
        __this__stats.add(other_element);
      }
      this.stats = __this__stats;
    }
  }

  public DatabaseSnapshot deepCopy() {
    return new DatabaseSnapshot(this);
  }

  @Override
  public void clear() {
    this.grades = null;
    this.stats = null;
  }

  public int getGradesSize() {
    return (this.grades == null) ? 0 : this.grades.size();
  }

  public java.util.Iterator<String> getGradesIterator() {
    return (this.grades == null) ? null : this.grades.iterator();
  }

  public void addToGrades(String elem) {
    if (this.grades == null) {
      this.grades = new ArrayList<String>();
    }
    this.grades.add(elem);
  }

  public List<String> getGrades() {
    return this.grades;
  }

  public DatabaseSnapshot setGrades(List<String> grades) {
    this.grades = grades;
    return this;
  }

  public void unsetGrades() {
    this.grades = null;
  }

  /** Returns true if field grades is set (has been assigned a value) and false otherwise */
  public boolean isSetGrades() {
    return this.grades != null;
  }

  public void setGradesIsSet(boolean value) {
    if (!value) {
      this.grades = null;
    }
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public java.util.Iterator<String> getStatsIterator() {
    return (this.stats == null) ? null : this.stats.iterator();
  }

  public void addToStats(String elem) {
    if (this.stats == null) {
      this.stats = new ArrayList<String>();
    }
    this.stats.add(elem);
  }

  public List<String> getStats() {
    return this.stats;
  }

  public DatabaseSnapshot setStats(List<String> stats) {
    this.stats = stats;
    return this;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GRADES:
      if (value == null) {
        unsetGrades();
      } else {
        setGrades((List<String>)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GRADES:
      return getGrades();

    case STATS:
      return getStats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GRADES:
      return isSetGrades();
    case STATS:
      return isSetStats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DatabaseSnapshot)
      return this.equals((DatabaseSnapshot)that);
    return false;
  }

  public boolean equals(DatabaseSnapshot that) {
    if (that == null)
      return false;

    boolean this_present_grades = true && this.isSetGrades();
    boolean that_present_grades = true && that.isSetGrades();
    if (this_present_grades || that_present_grades) {
      if (!(this_present_grades && that_present_grades))
        return false;
      if (!this.grades.equals(that.grades))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DatabaseSnapshot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DatabaseSnapshot typedOther = (DatabaseSnapshot)other;

    lastComparison = Boolean.valueOf(isSetGrades()).compareTo(typedOther.isSetGrades());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrades()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grades, typedOther.grades);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(typedOther.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, typedOther.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DatabaseSnapshot(");
    boolean first = true;

    sb.append("grades:");
    if (this.grades == null) {
      sb.append("null");
    } else {
      sb.append(this.grades);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stats:");
    if (this.stats == null) {
      sb.append("null");
    } else {
      sb.append(this.stats);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DatabaseSnapshotStandardSchemeFactory implements SchemeFactory {
    public DatabaseSnapshotStandardScheme getScheme() {
      return new DatabaseSnapshotStandardScheme();
    }
  }

  private static class DatabaseSnapshotStandardScheme extends StandardScheme<DatabaseSnapshot> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DatabaseSnapshot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GRADES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.grades = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.grades.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setGradesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.stats = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.stats.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DatabaseSnapshot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.grades != null) {
        oprot.writeFieldBegin(GRADES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.grades.size()));
          for (String _iter6 : struct.grades)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        oprot.writeFieldBegin(STATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
          for (String _iter7 : struct.stats)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DatabaseSnapshotTupleSchemeFactory implements SchemeFactory {
    public DatabaseSnapshotTupleScheme getScheme() {
      return new DatabaseSnapshotTupleScheme();
    }
  }

  private static class DatabaseSnapshotTupleScheme extends TupleScheme<DatabaseSnapshot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DatabaseSnapshot struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGrades()) {
        optionals.set(0);
      }
      if (struct.isSetStats()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGrades()) {
        {
          oprot.writeI32(struct.grades.size());
          for (String _iter8 : struct.grades)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (String _iter9 : struct.stats)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DatabaseSnapshot struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.grades = new ArrayList<String>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            String _elem12; // required
            _elem12 = iprot.readString();
            struct.grades.add(_elem12);
          }
        }
        struct.setGradesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.stats.add(_elem15);
          }
        }
        struct.setStatsIsSet(true);
      }
    }
  }

}

